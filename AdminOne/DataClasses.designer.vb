'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="DB8874_adminone")>  _
Partial Public Class DataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertaspnet_User(instance As aspnet_User)
    End Sub
  Partial Private Sub Updateaspnet_User(instance As aspnet_User)
    End Sub
  Partial Private Sub Deleteaspnet_User(instance As aspnet_User)
    End Sub
  Partial Private Sub InsertAdditionalUserDetail(instance As AdditionalUserDetail)
    End Sub
  Partial Private Sub UpdateAdditionalUserDetail(instance As AdditionalUserDetail)
    End Sub
  Partial Private Sub DeleteAdditionalUserDetail(instance As AdditionalUserDetail)
    End Sub
  Partial Private Sub InsertForumInstallationDetail(instance As ForumInstallationDetail)
    End Sub
  Partial Private Sub UpdateForumInstallationDetail(instance As ForumInstallationDetail)
    End Sub
  Partial Private Sub DeleteForumInstallationDetail(instance As ForumInstallationDetail)
    End Sub
  Partial Private Sub InsertForumSiteSurvey(instance As ForumSiteSurvey)
    End Sub
  Partial Private Sub UpdateForumSiteSurvey(instance As ForumSiteSurvey)
    End Sub
  Partial Private Sub DeleteForumSiteSurvey(instance As ForumSiteSurvey)
    End Sub
  Partial Private Sub InsertForumStage(instance As ForumStage)
    End Sub
  Partial Private Sub UpdateForumStage(instance As ForumStage)
    End Sub
  Partial Private Sub DeleteForumStage(instance As ForumStage)
    End Sub
  Partial Private Sub InsertForumSurveyProductAllocation(instance As ForumSurveyProductAllocation)
    End Sub
  Partial Private Sub UpdateForumSurveyProductAllocation(instance As ForumSurveyProductAllocation)
    End Sub
  Partial Private Sub DeleteForumSurveyProductAllocation(instance As ForumSurveyProductAllocation)
    End Sub
  Partial Private Sub InsertMed_Product(instance As Med_Product)
    End Sub
  Partial Private Sub UpdateMed_Product(instance As Med_Product)
    End Sub
  Partial Private Sub DeleteMed_Product(instance As Med_Product)
    End Sub
  Partial Private Sub InsertMed_QuotationDetail(instance As Med_QuotationDetail)
    End Sub
  Partial Private Sub UpdateMed_QuotationDetail(instance As Med_QuotationDetail)
    End Sub
  Partial Private Sub DeleteMed_QuotationDetail(instance As Med_QuotationDetail)
    End Sub
  Partial Private Sub InsertMed_QuotationProduct(instance As Med_QuotationProduct)
    End Sub
  Partial Private Sub UpdateMed_QuotationProduct(instance As Med_QuotationProduct)
    End Sub
  Partial Private Sub DeleteMed_QuotationProduct(instance As Med_QuotationProduct)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("DB8874_adminoneConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property aspnet_Users() As System.Data.Linq.Table(Of aspnet_User)
		Get
			Return Me.GetTable(Of aspnet_User)
		End Get
	End Property
	
	Public ReadOnly Property AdditionalUserDetails() As System.Data.Linq.Table(Of AdditionalUserDetail)
		Get
			Return Me.GetTable(Of AdditionalUserDetail)
		End Get
	End Property
	
	Public ReadOnly Property ForumInstallationDetails() As System.Data.Linq.Table(Of ForumInstallationDetail)
		Get
			Return Me.GetTable(Of ForumInstallationDetail)
		End Get
	End Property
	
	Public ReadOnly Property ForumSiteSurveys() As System.Data.Linq.Table(Of ForumSiteSurvey)
		Get
			Return Me.GetTable(Of ForumSiteSurvey)
		End Get
	End Property
	
	Public ReadOnly Property ForumStages() As System.Data.Linq.Table(Of ForumStage)
		Get
			Return Me.GetTable(Of ForumStage)
		End Get
	End Property
	
	Public ReadOnly Property ForumSurveyProductAllocations() As System.Data.Linq.Table(Of ForumSurveyProductAllocation)
		Get
			Return Me.GetTable(Of ForumSurveyProductAllocation)
		End Get
	End Property
	
	Public ReadOnly Property Med_Products() As System.Data.Linq.Table(Of Med_Product)
		Get
			Return Me.GetTable(Of Med_Product)
		End Get
	End Property
	
	Public ReadOnly Property Med_QuotationDetails() As System.Data.Linq.Table(Of Med_QuotationDetail)
		Get
			Return Me.GetTable(Of Med_QuotationDetail)
		End Get
	End Property
	
	Public ReadOnly Property Med_QuotationProducts() As System.Data.Linq.Table(Of Med_QuotationProduct)
		Get
			Return Me.GetTable(Of Med_QuotationProduct)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Users")>  _
Partial Public Class aspnet_User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Guid
	
	Private _UserId As System.Guid
	
	Private _UserName As String
	
	Private _LoweredUserName As String
	
	Private _MobileAlias As String
	
	Private _IsAnonymous As Boolean
	
	Private _LastActivityDate As Date
	
	Private _AdditionalUserDetail As EntityRef(Of AdditionalUserDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnLoweredUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredUserNameChanged()
    End Sub
    Partial Private Sub OnMobileAliasChanging(value As String)
    End Sub
    Partial Private Sub OnMobileAliasChanged()
    End Sub
    Partial Private Sub OnIsAnonymousChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsAnonymousChanged()
    End Sub
    Partial Private Sub OnLastActivityDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastActivityDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AdditionalUserDetail = CType(Nothing, EntityRef(Of AdditionalUserDetail))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredUserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property LoweredUserName() As String
		Get
			Return Me._LoweredUserName
		End Get
		Set
			If (String.Equals(Me._LoweredUserName, value) = false) Then
				Me.OnLoweredUserNameChanging(value)
				Me.SendPropertyChanging
				Me._LoweredUserName = value
				Me.SendPropertyChanged("LoweredUserName")
				Me.OnLoweredUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileAlias", DbType:="NVarChar(16)")>  _
	Public Property MobileAlias() As String
		Get
			Return Me._MobileAlias
		End Get
		Set
			If (String.Equals(Me._MobileAlias, value) = false) Then
				Me.OnMobileAliasChanging(value)
				Me.SendPropertyChanging
				Me._MobileAlias = value
				Me.SendPropertyChanged("MobileAlias")
				Me.OnMobileAliasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAnonymous", DbType:="Bit NOT NULL")>  _
	Public Property IsAnonymous() As Boolean
		Get
			Return Me._IsAnonymous
		End Get
		Set
			If ((Me._IsAnonymous = value)  _
						= false) Then
				Me.OnIsAnonymousChanging(value)
				Me.SendPropertyChanging
				Me._IsAnonymous = value
				Me.SendPropertyChanged("IsAnonymous")
				Me.OnIsAnonymousChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastActivityDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastActivityDate() As Date
		Get
			Return Me._LastActivityDate
		End Get
		Set
			If ((Me._LastActivityDate = value)  _
						= false) Then
				Me.OnLastActivityDateChanging(value)
				Me.SendPropertyChanging
				Me._LastActivityDate = value
				Me.SendPropertyChanged("LastActivityDate")
				Me.OnLastActivityDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_AdditionalUserDetail", Storage:="_AdditionalUserDetail", ThisKey:="UserId", OtherKey:="UserID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property AdditionalUserDetail() As AdditionalUserDetail
		Get
			Return Me._AdditionalUserDetail.Entity
		End Get
		Set
			Dim previousValue As AdditionalUserDetail = Me._AdditionalUserDetail.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AdditionalUserDetail.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AdditionalUserDetail.Entity = Nothing
					previousValue.aspnet_User = Nothing
				End If
				Me._AdditionalUserDetail.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.aspnet_User = Me
				End If
				Me.SendPropertyChanged("AdditionalUserDetail")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="DB8874_adminone_admin.AdditionalUserDetails")>  _
Partial Public Class AdditionalUserDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserID As System.Guid
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _FullName As String
	
	Private _ContactNumber As String
	
	Private _ReportingDivision As String
	
	Private _ForceChangePassword As System.Nullable(Of Boolean)
	
	Private _aspnet_User As EntityRef(Of aspnet_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnFullNameChanging(value As String)
    End Sub
    Partial Private Sub OnFullNameChanged()
    End Sub
    Partial Private Sub OnContactNumberChanging(value As String)
    End Sub
    Partial Private Sub OnContactNumberChanged()
    End Sub
    Partial Private Sub OnReportingDivisionChanging(value As String)
    End Sub
    Partial Private Sub OnReportingDivisionChanged()
    End Sub
    Partial Private Sub OnForceChangePasswordChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnForceChangePasswordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_User = CType(Nothing, EntityRef(Of aspnet_User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserID() As System.Guid
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				If Me._aspnet_User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(256)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(256)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(256)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me.OnFullNameChanging(value)
				Me.SendPropertyChanging
				Me._FullName = value
				Me.SendPropertyChanged("FullName")
				Me.OnFullNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactNumber", DbType:="NVarChar(256)")>  _
	Public Property ContactNumber() As String
		Get
			Return Me._ContactNumber
		End Get
		Set
			If (String.Equals(Me._ContactNumber, value) = false) Then
				Me.OnContactNumberChanging(value)
				Me.SendPropertyChanging
				Me._ContactNumber = value
				Me.SendPropertyChanged("ContactNumber")
				Me.OnContactNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportingDivision", DbType:="NVarChar(256)")>  _
	Public Property ReportingDivision() As String
		Get
			Return Me._ReportingDivision
		End Get
		Set
			If (String.Equals(Me._ReportingDivision, value) = false) Then
				Me.OnReportingDivisionChanging(value)
				Me.SendPropertyChanging
				Me._ReportingDivision = value
				Me.SendPropertyChanged("ReportingDivision")
				Me.OnReportingDivisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ForceChangePassword", DbType:="Bit")>  _
	Public Property ForceChangePassword() As System.Nullable(Of Boolean)
		Get
			Return Me._ForceChangePassword
		End Get
		Set
			If (Me._ForceChangePassword.Equals(value) = false) Then
				Me.OnForceChangePasswordChanging(value)
				Me.SendPropertyChanging
				Me._ForceChangePassword = value
				Me.SendPropertyChanged("ForceChangePassword")
				Me.OnForceChangePasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_AdditionalUserDetail", Storage:="_aspnet_User", ThisKey:="UserID", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property aspnet_User() As aspnet_User
		Get
			Return Me._aspnet_User.Entity
		End Get
		Set
			Dim previousValue As aspnet_User = Me._aspnet_User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_User.Entity = Nothing
					previousValue.AdditionalUserDetail = Nothing
				End If
				Me._aspnet_User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AdditionalUserDetail = Me
					Me._UserID = value.UserId
				Else
					Me._UserID = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="DB8874_adminone_admin.ForumInstallationDetails")>  _
Partial Public Class ForumInstallationDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As System.Guid
	
	Private _InstallationID As String
	
	Private _PercentageComplete As System.Nullable(Of Integer)
	
	Private _CreatedDateTime As System.Nullable(Of Date)
	
	Private _CreatedBy As String
	
	Private _UpdatedDateTime As System.Nullable(Of Date)
	
	Private _UpdatedBy As String
	
	Private _VendorName As String
	
	Private _VendorAddress As String
	
	Private _VendorAddressCont As String
	
	Private _VendorPostCode As String
	
	Private _VendorState As String
	
	Private _VendorCountry As String
	
	Private _VendorContactName As String
	
	Private _VendorContactNumber As String
	
	Private _VendorContactEmail As String
	
	Private _ZeissSalesPerson As String
	
	Private _ZeissEngineer As String
	
	Private _ForumSiteSurveys As EntitySet(Of ForumSiteSurvey)
	
	Private _ForumStages As EntitySet(Of ForumStage)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnInstallationIDChanging(value As String)
    End Sub
    Partial Private Sub OnInstallationIDChanged()
    End Sub
    Partial Private Sub OnPercentageCompleteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPercentageCompleteChanged()
    End Sub
    Partial Private Sub OnCreatedDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedDateTimeChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnUpdatedDateTimeChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnVendorNameChanging(value As String)
    End Sub
    Partial Private Sub OnVendorNameChanged()
    End Sub
    Partial Private Sub OnVendorAddressChanging(value As String)
    End Sub
    Partial Private Sub OnVendorAddressChanged()
    End Sub
    Partial Private Sub OnVendorAddressContChanging(value As String)
    End Sub
    Partial Private Sub OnVendorAddressContChanged()
    End Sub
    Partial Private Sub OnVendorPostCodeChanging(value As String)
    End Sub
    Partial Private Sub OnVendorPostCodeChanged()
    End Sub
    Partial Private Sub OnVendorStateChanging(value As String)
    End Sub
    Partial Private Sub OnVendorStateChanged()
    End Sub
    Partial Private Sub OnVendorCountryChanging(value As String)
    End Sub
    Partial Private Sub OnVendorCountryChanged()
    End Sub
    Partial Private Sub OnVendorContactNameChanging(value As String)
    End Sub
    Partial Private Sub OnVendorContactNameChanged()
    End Sub
    Partial Private Sub OnVendorContactNumberChanging(value As String)
    End Sub
    Partial Private Sub OnVendorContactNumberChanged()
    End Sub
    Partial Private Sub OnVendorContactEmailChanging(value As String)
    End Sub
    Partial Private Sub OnVendorContactEmailChanged()
    End Sub
    Partial Private Sub OnZeissSalesPersonChanging(value As String)
    End Sub
    Partial Private Sub OnZeissSalesPersonChanged()
    End Sub
    Partial Private Sub OnZeissEngineerChanging(value As String)
    End Sub
    Partial Private Sub OnZeissEngineerChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ForumSiteSurveys = New EntitySet(Of ForumSiteSurvey)(AddressOf Me.attach_ForumSiteSurveys, AddressOf Me.detach_ForumSiteSurveys)
		Me._ForumStages = New EntitySet(Of ForumStage)(AddressOf Me.attach_ForumStages, AddressOf Me.detach_ForumStages)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As System.Guid
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstallationID", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property InstallationID() As String
		Get
			Return Me._InstallationID
		End Get
		Set
			If (String.Equals(Me._InstallationID, value) = false) Then
				Me.OnInstallationIDChanging(value)
				Me.SendPropertyChanging
				Me._InstallationID = value
				Me.SendPropertyChanged("InstallationID")
				Me.OnInstallationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PercentageComplete", DbType:="Int")>  _
	Public Property PercentageComplete() As System.Nullable(Of Integer)
		Get
			Return Me._PercentageComplete
		End Get
		Set
			If (Me._PercentageComplete.Equals(value) = false) Then
				Me.OnPercentageCompleteChanging(value)
				Me.SendPropertyChanging
				Me._PercentageComplete = value
				Me.SendPropertyChanged("PercentageComplete")
				Me.OnPercentageCompleteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDateTime", DbType:="DateTime")>  _
	Public Property CreatedDateTime() As System.Nullable(Of Date)
		Get
			Return Me._CreatedDateTime
		End Get
		Set
			If (Me._CreatedDateTime.Equals(value) = false) Then
				Me.OnCreatedDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._CreatedDateTime = value
				Me.SendPropertyChanged("CreatedDateTime")
				Me.OnCreatedDateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="NVarChar(256)")>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedDateTime", DbType:="DateTime")>  _
	Public Property UpdatedDateTime() As System.Nullable(Of Date)
		Get
			Return Me._UpdatedDateTime
		End Get
		Set
			If (Me._UpdatedDateTime.Equals(value) = false) Then
				Me.OnUpdatedDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedDateTime = value
				Me.SendPropertyChanged("UpdatedDateTime")
				Me.OnUpdatedDateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="NVarChar(256)")>  _
	Public Property UpdatedBy() As String
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (String.Equals(Me._UpdatedBy, value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorName", DbType:="NVarChar(256)")>  _
	Public Property VendorName() As String
		Get
			Return Me._VendorName
		End Get
		Set
			If (String.Equals(Me._VendorName, value) = false) Then
				Me.OnVendorNameChanging(value)
				Me.SendPropertyChanging
				Me._VendorName = value
				Me.SendPropertyChanged("VendorName")
				Me.OnVendorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorAddress", DbType:="NVarChar(256)")>  _
	Public Property VendorAddress() As String
		Get
			Return Me._VendorAddress
		End Get
		Set
			If (String.Equals(Me._VendorAddress, value) = false) Then
				Me.OnVendorAddressChanging(value)
				Me.SendPropertyChanging
				Me._VendorAddress = value
				Me.SendPropertyChanged("VendorAddress")
				Me.OnVendorAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorAddressCont", DbType:="NVarChar(256)")>  _
	Public Property VendorAddressCont() As String
		Get
			Return Me._VendorAddressCont
		End Get
		Set
			If (String.Equals(Me._VendorAddressCont, value) = false) Then
				Me.OnVendorAddressContChanging(value)
				Me.SendPropertyChanging
				Me._VendorAddressCont = value
				Me.SendPropertyChanged("VendorAddressCont")
				Me.OnVendorAddressContChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorPostCode", DbType:="NVarChar(16)")>  _
	Public Property VendorPostCode() As String
		Get
			Return Me._VendorPostCode
		End Get
		Set
			If (String.Equals(Me._VendorPostCode, value) = false) Then
				Me.OnVendorPostCodeChanging(value)
				Me.SendPropertyChanging
				Me._VendorPostCode = value
				Me.SendPropertyChanged("VendorPostCode")
				Me.OnVendorPostCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorState", DbType:="NVarChar(16)")>  _
	Public Property VendorState() As String
		Get
			Return Me._VendorState
		End Get
		Set
			If (String.Equals(Me._VendorState, value) = false) Then
				Me.OnVendorStateChanging(value)
				Me.SendPropertyChanging
				Me._VendorState = value
				Me.SendPropertyChanged("VendorState")
				Me.OnVendorStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorCountry", DbType:="NVarChar(60)")>  _
	Public Property VendorCountry() As String
		Get
			Return Me._VendorCountry
		End Get
		Set
			If (String.Equals(Me._VendorCountry, value) = false) Then
				Me.OnVendorCountryChanging(value)
				Me.SendPropertyChanging
				Me._VendorCountry = value
				Me.SendPropertyChanged("VendorCountry")
				Me.OnVendorCountryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorContactName", DbType:="NVarChar(256)")>  _
	Public Property VendorContactName() As String
		Get
			Return Me._VendorContactName
		End Get
		Set
			If (String.Equals(Me._VendorContactName, value) = false) Then
				Me.OnVendorContactNameChanging(value)
				Me.SendPropertyChanging
				Me._VendorContactName = value
				Me.SendPropertyChanged("VendorContactName")
				Me.OnVendorContactNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorContactNumber", DbType:="NVarChar(60)")>  _
	Public Property VendorContactNumber() As String
		Get
			Return Me._VendorContactNumber
		End Get
		Set
			If (String.Equals(Me._VendorContactNumber, value) = false) Then
				Me.OnVendorContactNumberChanging(value)
				Me.SendPropertyChanging
				Me._VendorContactNumber = value
				Me.SendPropertyChanged("VendorContactNumber")
				Me.OnVendorContactNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorContactEmail", DbType:="NVarChar(256)")>  _
	Public Property VendorContactEmail() As String
		Get
			Return Me._VendorContactEmail
		End Get
		Set
			If (String.Equals(Me._VendorContactEmail, value) = false) Then
				Me.OnVendorContactEmailChanging(value)
				Me.SendPropertyChanging
				Me._VendorContactEmail = value
				Me.SendPropertyChanged("VendorContactEmail")
				Me.OnVendorContactEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZeissSalesPerson", DbType:="NVarChar(256)")>  _
	Public Property ZeissSalesPerson() As String
		Get
			Return Me._ZeissSalesPerson
		End Get
		Set
			If (String.Equals(Me._ZeissSalesPerson, value) = false) Then
				Me.OnZeissSalesPersonChanging(value)
				Me.SendPropertyChanging
				Me._ZeissSalesPerson = value
				Me.SendPropertyChanged("ZeissSalesPerson")
				Me.OnZeissSalesPersonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZeissEngineer", DbType:="NVarChar(256)")>  _
	Public Property ZeissEngineer() As String
		Get
			Return Me._ZeissEngineer
		End Get
		Set
			If (String.Equals(Me._ZeissEngineer, value) = false) Then
				Me.OnZeissEngineerChanging(value)
				Me.SendPropertyChanging
				Me._ZeissEngineer = value
				Me.SendPropertyChanged("ZeissEngineer")
				Me.OnZeissEngineerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ForumInstallationDetail_ForumSiteSurvey", Storage:="_ForumSiteSurveys", ThisKey:="InstallationID", OtherKey:="InstallationID")>  _
	Public Property ForumSiteSurveys() As EntitySet(Of ForumSiteSurvey)
		Get
			Return Me._ForumSiteSurveys
		End Get
		Set
			Me._ForumSiteSurveys.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ForumInstallationDetail_ForumStage", Storage:="_ForumStages", ThisKey:="InstallationID", OtherKey:="InstallationID")>  _
	Public Property ForumStages() As EntitySet(Of ForumStage)
		Get
			Return Me._ForumStages
		End Get
		Set
			Me._ForumStages.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ForumSiteSurveys(ByVal entity As ForumSiteSurvey)
		Me.SendPropertyChanging
		entity.ForumInstallationDetail = Me
	End Sub
	
	Private Sub detach_ForumSiteSurveys(ByVal entity As ForumSiteSurvey)
		Me.SendPropertyChanging
		entity.ForumInstallationDetail = Nothing
	End Sub
	
	Private Sub attach_ForumStages(ByVal entity As ForumStage)
		Me.SendPropertyChanging
		entity.ForumInstallationDetail = Me
	End Sub
	
	Private Sub detach_ForumStages(ByVal entity As ForumStage)
		Me.SendPropertyChanging
		entity.ForumInstallationDetail = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="DB8874_adminone_admin.ForumSiteSurvey")>  _
Partial Public Class ForumSiteSurvey
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As System.Guid
	
	Private _InstallationID As String
	
	Private _CreatedDateTime As System.Nullable(Of Date)
	
	Private _CreatedBy As String
	
	Private _UpdatedDateTime As System.Nullable(Of Date)
	
	Private _UpdatedBy As String
	
	Private _ArchiveAndViewer As System.Nullable(Of Boolean)
	
	Private _GlaucomaWorkplaceMain As System.Nullable(Of Boolean)
	
	Private _RetinaWorkplaceMain As System.Nullable(Of Boolean)
	
	Private _FORUMUserLicences As System.Nullable(Of Integer)
	
	Private _GlaucomaWorkplaceUserLicences As System.Nullable(Of Integer)
	
	Private _RetinaWorkplaceUserLicences As System.Nullable(Of Integer)
	
	Private _ZeissDeviceConnections As System.Nullable(Of Integer)
	
	Private _ThirdPartyDeviceConnections As System.Nullable(Of Integer)
	
	Private _EMRRequired As System.Nullable(Of Boolean)
	
	Private _EMRVendor As String
	
	Private _DataCleanseRequired As System.Nullable(Of Boolean)
	
	Private _RequestsAndNotes As String
	
	Private _ZeissProvidedServer As System.Nullable(Of Boolean)
	
	Private _ZeissServerStorageRequired As System.Nullable(Of Boolean)
	
	Private _ZeissServerMonitorRequired As System.Nullable(Of Boolean)
	
	Private _CustomerProvidedServer As System.Nullable(Of Boolean)
	
	Private _CustomerServerIsDedicated As System.Nullable(Of Boolean)
	
	Private _CustomerServerMeetsSpecifications As System.Nullable(Of Boolean)
	
	Private _ForumInstallationDetail As EntityRef(Of ForumInstallationDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnInstallationIDChanging(value As String)
    End Sub
    Partial Private Sub OnInstallationIDChanged()
    End Sub
    Partial Private Sub OnCreatedDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedDateTimeChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnUpdatedDateTimeChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnArchiveAndViewerChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnArchiveAndViewerChanged()
    End Sub
    Partial Private Sub OnGlaucomaWorkplaceMainChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnGlaucomaWorkplaceMainChanged()
    End Sub
    Partial Private Sub OnRetinaWorkplaceMainChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnRetinaWorkplaceMainChanged()
    End Sub
    Partial Private Sub OnFORUMUserLicencesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFORUMUserLicencesChanged()
    End Sub
    Partial Private Sub OnGlaucomaWorkplaceUserLicencesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGlaucomaWorkplaceUserLicencesChanged()
    End Sub
    Partial Private Sub OnRetinaWorkplaceUserLicencesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRetinaWorkplaceUserLicencesChanged()
    End Sub
    Partial Private Sub OnZeissDeviceConnectionsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnZeissDeviceConnectionsChanged()
    End Sub
    Partial Private Sub OnThirdPartyDeviceConnectionsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnThirdPartyDeviceConnectionsChanged()
    End Sub
    Partial Private Sub OnEMRRequiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEMRRequiredChanged()
    End Sub
    Partial Private Sub OnEMRVendorChanging(value As String)
    End Sub
    Partial Private Sub OnEMRVendorChanged()
    End Sub
    Partial Private Sub OnDataCleanseRequiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDataCleanseRequiredChanged()
    End Sub
    Partial Private Sub OnRequestsAndNotesChanging(value As String)
    End Sub
    Partial Private Sub OnRequestsAndNotesChanged()
    End Sub
    Partial Private Sub OnZeissProvidedServerChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnZeissProvidedServerChanged()
    End Sub
    Partial Private Sub OnZeissServerStorageRequiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnZeissServerStorageRequiredChanged()
    End Sub
    Partial Private Sub OnZeissServerMonitorRequiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnZeissServerMonitorRequiredChanged()
    End Sub
    Partial Private Sub OnCustomerProvidedServerChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCustomerProvidedServerChanged()
    End Sub
    Partial Private Sub OnCustomerServerIsDedicatedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCustomerServerIsDedicatedChanged()
    End Sub
    Partial Private Sub OnCustomerServerMeetsSpecificationsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCustomerServerMeetsSpecificationsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ForumInstallationDetail = CType(Nothing, EntityRef(Of ForumInstallationDetail))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As System.Guid
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstallationID", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property InstallationID() As String
		Get
			Return Me._InstallationID
		End Get
		Set
			If (String.Equals(Me._InstallationID, value) = false) Then
				If Me._ForumInstallationDetail.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnInstallationIDChanging(value)
				Me.SendPropertyChanging
				Me._InstallationID = value
				Me.SendPropertyChanged("InstallationID")
				Me.OnInstallationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDateTime", DbType:="DateTime")>  _
	Public Property CreatedDateTime() As System.Nullable(Of Date)
		Get
			Return Me._CreatedDateTime
		End Get
		Set
			If (Me._CreatedDateTime.Equals(value) = false) Then
				Me.OnCreatedDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._CreatedDateTime = value
				Me.SendPropertyChanged("CreatedDateTime")
				Me.OnCreatedDateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="NVarChar(256)")>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedDateTime", DbType:="DateTime")>  _
	Public Property UpdatedDateTime() As System.Nullable(Of Date)
		Get
			Return Me._UpdatedDateTime
		End Get
		Set
			If (Me._UpdatedDateTime.Equals(value) = false) Then
				Me.OnUpdatedDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedDateTime = value
				Me.SendPropertyChanged("UpdatedDateTime")
				Me.OnUpdatedDateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="NVarChar(256)")>  _
	Public Property UpdatedBy() As String
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (String.Equals(Me._UpdatedBy, value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArchiveAndViewer", DbType:="Bit")>  _
	Public Property ArchiveAndViewer() As System.Nullable(Of Boolean)
		Get
			Return Me._ArchiveAndViewer
		End Get
		Set
			If (Me._ArchiveAndViewer.Equals(value) = false) Then
				Me.OnArchiveAndViewerChanging(value)
				Me.SendPropertyChanging
				Me._ArchiveAndViewer = value
				Me.SendPropertyChanged("ArchiveAndViewer")
				Me.OnArchiveAndViewerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GlaucomaWorkplaceMain", DbType:="Bit")>  _
	Public Property GlaucomaWorkplaceMain() As System.Nullable(Of Boolean)
		Get
			Return Me._GlaucomaWorkplaceMain
		End Get
		Set
			If (Me._GlaucomaWorkplaceMain.Equals(value) = false) Then
				Me.OnGlaucomaWorkplaceMainChanging(value)
				Me.SendPropertyChanging
				Me._GlaucomaWorkplaceMain = value
				Me.SendPropertyChanged("GlaucomaWorkplaceMain")
				Me.OnGlaucomaWorkplaceMainChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetinaWorkplaceMain", DbType:="Bit")>  _
	Public Property RetinaWorkplaceMain() As System.Nullable(Of Boolean)
		Get
			Return Me._RetinaWorkplaceMain
		End Get
		Set
			If (Me._RetinaWorkplaceMain.Equals(value) = false) Then
				Me.OnRetinaWorkplaceMainChanging(value)
				Me.SendPropertyChanging
				Me._RetinaWorkplaceMain = value
				Me.SendPropertyChanged("RetinaWorkplaceMain")
				Me.OnRetinaWorkplaceMainChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FORUMUserLicences", DbType:="Int")>  _
	Public Property FORUMUserLicences() As System.Nullable(Of Integer)
		Get
			Return Me._FORUMUserLicences
		End Get
		Set
			If (Me._FORUMUserLicences.Equals(value) = false) Then
				Me.OnFORUMUserLicencesChanging(value)
				Me.SendPropertyChanging
				Me._FORUMUserLicences = value
				Me.SendPropertyChanged("FORUMUserLicences")
				Me.OnFORUMUserLicencesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GlaucomaWorkplaceUserLicences", DbType:="Int")>  _
	Public Property GlaucomaWorkplaceUserLicences() As System.Nullable(Of Integer)
		Get
			Return Me._GlaucomaWorkplaceUserLicences
		End Get
		Set
			If (Me._GlaucomaWorkplaceUserLicences.Equals(value) = false) Then
				Me.OnGlaucomaWorkplaceUserLicencesChanging(value)
				Me.SendPropertyChanging
				Me._GlaucomaWorkplaceUserLicences = value
				Me.SendPropertyChanged("GlaucomaWorkplaceUserLicences")
				Me.OnGlaucomaWorkplaceUserLicencesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetinaWorkplaceUserLicences", DbType:="Int")>  _
	Public Property RetinaWorkplaceUserLicences() As System.Nullable(Of Integer)
		Get
			Return Me._RetinaWorkplaceUserLicences
		End Get
		Set
			If (Me._RetinaWorkplaceUserLicences.Equals(value) = false) Then
				Me.OnRetinaWorkplaceUserLicencesChanging(value)
				Me.SendPropertyChanging
				Me._RetinaWorkplaceUserLicences = value
				Me.SendPropertyChanged("RetinaWorkplaceUserLicences")
				Me.OnRetinaWorkplaceUserLicencesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZeissDeviceConnections", DbType:="Int")>  _
	Public Property ZeissDeviceConnections() As System.Nullable(Of Integer)
		Get
			Return Me._ZeissDeviceConnections
		End Get
		Set
			If (Me._ZeissDeviceConnections.Equals(value) = false) Then
				Me.OnZeissDeviceConnectionsChanging(value)
				Me.SendPropertyChanging
				Me._ZeissDeviceConnections = value
				Me.SendPropertyChanged("ZeissDeviceConnections")
				Me.OnZeissDeviceConnectionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThirdPartyDeviceConnections", DbType:="Int")>  _
	Public Property ThirdPartyDeviceConnections() As System.Nullable(Of Integer)
		Get
			Return Me._ThirdPartyDeviceConnections
		End Get
		Set
			If (Me._ThirdPartyDeviceConnections.Equals(value) = false) Then
				Me.OnThirdPartyDeviceConnectionsChanging(value)
				Me.SendPropertyChanging
				Me._ThirdPartyDeviceConnections = value
				Me.SendPropertyChanged("ThirdPartyDeviceConnections")
				Me.OnThirdPartyDeviceConnectionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMRRequired", DbType:="Bit")>  _
	Public Property EMRRequired() As System.Nullable(Of Boolean)
		Get
			Return Me._EMRRequired
		End Get
		Set
			If (Me._EMRRequired.Equals(value) = false) Then
				Me.OnEMRRequiredChanging(value)
				Me.SendPropertyChanging
				Me._EMRRequired = value
				Me.SendPropertyChanged("EMRRequired")
				Me.OnEMRRequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMRVendor", DbType:="NVarChar(256)")>  _
	Public Property EMRVendor() As String
		Get
			Return Me._EMRVendor
		End Get
		Set
			If (String.Equals(Me._EMRVendor, value) = false) Then
				Me.OnEMRVendorChanging(value)
				Me.SendPropertyChanging
				Me._EMRVendor = value
				Me.SendPropertyChanged("EMRVendor")
				Me.OnEMRVendorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataCleanseRequired", DbType:="Bit")>  _
	Public Property DataCleanseRequired() As System.Nullable(Of Boolean)
		Get
			Return Me._DataCleanseRequired
		End Get
		Set
			If (Me._DataCleanseRequired.Equals(value) = false) Then
				Me.OnDataCleanseRequiredChanging(value)
				Me.SendPropertyChanging
				Me._DataCleanseRequired = value
				Me.SendPropertyChanged("DataCleanseRequired")
				Me.OnDataCleanseRequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequestsAndNotes", DbType:="NVarChar(MAX)")>  _
	Public Property RequestsAndNotes() As String
		Get
			Return Me._RequestsAndNotes
		End Get
		Set
			If (String.Equals(Me._RequestsAndNotes, value) = false) Then
				Me.OnRequestsAndNotesChanging(value)
				Me.SendPropertyChanging
				Me._RequestsAndNotes = value
				Me.SendPropertyChanged("RequestsAndNotes")
				Me.OnRequestsAndNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZeissProvidedServer", DbType:="Bit")>  _
	Public Property ZeissProvidedServer() As System.Nullable(Of Boolean)
		Get
			Return Me._ZeissProvidedServer
		End Get
		Set
			If (Me._ZeissProvidedServer.Equals(value) = false) Then
				Me.OnZeissProvidedServerChanging(value)
				Me.SendPropertyChanging
				Me._ZeissProvidedServer = value
				Me.SendPropertyChanged("ZeissProvidedServer")
				Me.OnZeissProvidedServerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZeissServerStorageRequired", DbType:="Bit")>  _
	Public Property ZeissServerStorageRequired() As System.Nullable(Of Boolean)
		Get
			Return Me._ZeissServerStorageRequired
		End Get
		Set
			If (Me._ZeissServerStorageRequired.Equals(value) = false) Then
				Me.OnZeissServerStorageRequiredChanging(value)
				Me.SendPropertyChanging
				Me._ZeissServerStorageRequired = value
				Me.SendPropertyChanged("ZeissServerStorageRequired")
				Me.OnZeissServerStorageRequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZeissServerMonitorRequired", DbType:="Bit")>  _
	Public Property ZeissServerMonitorRequired() As System.Nullable(Of Boolean)
		Get
			Return Me._ZeissServerMonitorRequired
		End Get
		Set
			If (Me._ZeissServerMonitorRequired.Equals(value) = false) Then
				Me.OnZeissServerMonitorRequiredChanging(value)
				Me.SendPropertyChanging
				Me._ZeissServerMonitorRequired = value
				Me.SendPropertyChanged("ZeissServerMonitorRequired")
				Me.OnZeissServerMonitorRequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerProvidedServer", DbType:="Bit")>  _
	Public Property CustomerProvidedServer() As System.Nullable(Of Boolean)
		Get
			Return Me._CustomerProvidedServer
		End Get
		Set
			If (Me._CustomerProvidedServer.Equals(value) = false) Then
				Me.OnCustomerProvidedServerChanging(value)
				Me.SendPropertyChanging
				Me._CustomerProvidedServer = value
				Me.SendPropertyChanged("CustomerProvidedServer")
				Me.OnCustomerProvidedServerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerServerIsDedicated", DbType:="Bit")>  _
	Public Property CustomerServerIsDedicated() As System.Nullable(Of Boolean)
		Get
			Return Me._CustomerServerIsDedicated
		End Get
		Set
			If (Me._CustomerServerIsDedicated.Equals(value) = false) Then
				Me.OnCustomerServerIsDedicatedChanging(value)
				Me.SendPropertyChanging
				Me._CustomerServerIsDedicated = value
				Me.SendPropertyChanged("CustomerServerIsDedicated")
				Me.OnCustomerServerIsDedicatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerServerMeetsSpecifications", DbType:="Bit")>  _
	Public Property CustomerServerMeetsSpecifications() As System.Nullable(Of Boolean)
		Get
			Return Me._CustomerServerMeetsSpecifications
		End Get
		Set
			If (Me._CustomerServerMeetsSpecifications.Equals(value) = false) Then
				Me.OnCustomerServerMeetsSpecificationsChanging(value)
				Me.SendPropertyChanging
				Me._CustomerServerMeetsSpecifications = value
				Me.SendPropertyChanged("CustomerServerMeetsSpecifications")
				Me.OnCustomerServerMeetsSpecificationsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ForumInstallationDetail_ForumSiteSurvey", Storage:="_ForumInstallationDetail", ThisKey:="InstallationID", OtherKey:="InstallationID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property ForumInstallationDetail() As ForumInstallationDetail
		Get
			Return Me._ForumInstallationDetail.Entity
		End Get
		Set
			Dim previousValue As ForumInstallationDetail = Me._ForumInstallationDetail.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ForumInstallationDetail.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ForumInstallationDetail.Entity = Nothing
					previousValue.ForumSiteSurveys.Remove(Me)
				End If
				Me._ForumInstallationDetail.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ForumSiteSurveys.Add(Me)
					Me._InstallationID = value.InstallationID
				Else
					Me._InstallationID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ForumInstallationDetail")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="DB8874_adminone_admin.ForumStages")>  _
Partial Public Class ForumStage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As System.Guid
	
	Private _InstallationID As String
	
	Private _StageDescription As String
	
	Private _MainButtonText As String
	
	Private _StepNumber As System.Nullable(Of Integer)
	
	Private _StepStatus As System.Nullable(Of Integer)
	
	Private _UpdatedBy As String
	
	Private _UpdatedDateTime As System.Nullable(Of Date)
	
	Private _CompletedBy As String
	
	Private _CompletedDateTime As System.Nullable(Of Date)
	
	Private _Notes As String
	
	Private _AssignedTo As String
	
	Private _ForumInstallationDetail As EntityRef(Of ForumInstallationDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnInstallationIDChanging(value As String)
    End Sub
    Partial Private Sub OnInstallationIDChanged()
    End Sub
    Partial Private Sub OnStageDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnStageDescriptionChanged()
    End Sub
    Partial Private Sub OnMainButtonTextChanging(value As String)
    End Sub
    Partial Private Sub OnMainButtonTextChanged()
    End Sub
    Partial Private Sub OnStepNumberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStepNumberChanged()
    End Sub
    Partial Private Sub OnStepStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStepStatusChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnUpdatedDateTimeChanged()
    End Sub
    Partial Private Sub OnCompletedByChanging(value As String)
    End Sub
    Partial Private Sub OnCompletedByChanged()
    End Sub
    Partial Private Sub OnCompletedDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCompletedDateTimeChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnAssignedToChanging(value As String)
    End Sub
    Partial Private Sub OnAssignedToChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ForumInstallationDetail = CType(Nothing, EntityRef(Of ForumInstallationDetail))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As System.Guid
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstallationID", DbType:="NVarChar(256)")>  _
	Public Property InstallationID() As String
		Get
			Return Me._InstallationID
		End Get
		Set
			If (String.Equals(Me._InstallationID, value) = false) Then
				If Me._ForumInstallationDetail.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnInstallationIDChanging(value)
				Me.SendPropertyChanging
				Me._InstallationID = value
				Me.SendPropertyChanged("InstallationID")
				Me.OnInstallationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StageDescription", DbType:="NVarChar(256)")>  _
	Public Property StageDescription() As String
		Get
			Return Me._StageDescription
		End Get
		Set
			If (String.Equals(Me._StageDescription, value) = false) Then
				Me.OnStageDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._StageDescription = value
				Me.SendPropertyChanged("StageDescription")
				Me.OnStageDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MainButtonText", DbType:="NVarChar(256)")>  _
	Public Property MainButtonText() As String
		Get
			Return Me._MainButtonText
		End Get
		Set
			If (String.Equals(Me._MainButtonText, value) = false) Then
				Me.OnMainButtonTextChanging(value)
				Me.SendPropertyChanging
				Me._MainButtonText = value
				Me.SendPropertyChanged("MainButtonText")
				Me.OnMainButtonTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StepNumber", DbType:="Int")>  _
	Public Property StepNumber() As System.Nullable(Of Integer)
		Get
			Return Me._StepNumber
		End Get
		Set
			If (Me._StepNumber.Equals(value) = false) Then
				Me.OnStepNumberChanging(value)
				Me.SendPropertyChanging
				Me._StepNumber = value
				Me.SendPropertyChanged("StepNumber")
				Me.OnStepNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StepStatus", DbType:="Int")>  _
	Public Property StepStatus() As System.Nullable(Of Integer)
		Get
			Return Me._StepStatus
		End Get
		Set
			If (Me._StepStatus.Equals(value) = false) Then
				Me.OnStepStatusChanging(value)
				Me.SendPropertyChanging
				Me._StepStatus = value
				Me.SendPropertyChanged("StepStatus")
				Me.OnStepStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="NVarChar(256)")>  _
	Public Property UpdatedBy() As String
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (String.Equals(Me._UpdatedBy, value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedDateTime", DbType:="DateTime")>  _
	Public Property UpdatedDateTime() As System.Nullable(Of Date)
		Get
			Return Me._UpdatedDateTime
		End Get
		Set
			If (Me._UpdatedDateTime.Equals(value) = false) Then
				Me.OnUpdatedDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedDateTime = value
				Me.SendPropertyChanged("UpdatedDateTime")
				Me.OnUpdatedDateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompletedBy", DbType:="NVarChar(256)")>  _
	Public Property CompletedBy() As String
		Get
			Return Me._CompletedBy
		End Get
		Set
			If (String.Equals(Me._CompletedBy, value) = false) Then
				Me.OnCompletedByChanging(value)
				Me.SendPropertyChanging
				Me._CompletedBy = value
				Me.SendPropertyChanged("CompletedBy")
				Me.OnCompletedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompletedDateTime", DbType:="DateTime")>  _
	Public Property CompletedDateTime() As System.Nullable(Of Date)
		Get
			Return Me._CompletedDateTime
		End Get
		Set
			If (Me._CompletedDateTime.Equals(value) = false) Then
				Me.OnCompletedDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._CompletedDateTime = value
				Me.SendPropertyChanged("CompletedDateTime")
				Me.OnCompletedDateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssignedTo", DbType:="NVarChar(256)")>  _
	Public Property AssignedTo() As String
		Get
			Return Me._AssignedTo
		End Get
		Set
			If (String.Equals(Me._AssignedTo, value) = false) Then
				Me.OnAssignedToChanging(value)
				Me.SendPropertyChanging
				Me._AssignedTo = value
				Me.SendPropertyChanged("AssignedTo")
				Me.OnAssignedToChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ForumInstallationDetail_ForumStage", Storage:="_ForumInstallationDetail", ThisKey:="InstallationID", OtherKey:="InstallationID", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property ForumInstallationDetail() As ForumInstallationDetail
		Get
			Return Me._ForumInstallationDetail.Entity
		End Get
		Set
			Dim previousValue As ForumInstallationDetail = Me._ForumInstallationDetail.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ForumInstallationDetail.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ForumInstallationDetail.Entity = Nothing
					previousValue.ForumStages.Remove(Me)
				End If
				Me._ForumInstallationDetail.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ForumStages.Add(Me)
					Me._InstallationID = value.InstallationID
				Else
					Me._InstallationID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ForumInstallationDetail")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="DB8874_adminone_admin.ForumSurveyProductAllocations")>  _
Partial Public Class ForumSurveyProductAllocation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As System.Guid
	
	Private _SiteSurveyDescription As String
	
	Private _ProductRowID As System.Nullable(Of System.Guid)
	
	Private _Med_Product As EntityRef(Of Med_Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnSiteSurveyDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnSiteSurveyDescriptionChanged()
    End Sub
    Partial Private Sub OnProductRowIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnProductRowIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Med_Product = CType(Nothing, EntityRef(Of Med_Product))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As System.Guid
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteSurveyDescription", DbType:="NVarChar(256)")>  _
	Public Property SiteSurveyDescription() As String
		Get
			Return Me._SiteSurveyDescription
		End Get
		Set
			If (String.Equals(Me._SiteSurveyDescription, value) = false) Then
				Me.OnSiteSurveyDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._SiteSurveyDescription = value
				Me.SendPropertyChanged("SiteSurveyDescription")
				Me.OnSiteSurveyDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductRowID", DbType:="UniqueIdentifier")>  _
	Public Property ProductRowID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ProductRowID
		End Get
		Set
			If (Me._ProductRowID.Equals(value) = false) Then
				If Me._Med_Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProductRowIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductRowID = value
				Me.SendPropertyChanged("ProductRowID")
				Me.OnProductRowIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Med_Product_ForumSurveyProductAllocation", Storage:="_Med_Product", ThisKey:="ProductRowID", OtherKey:="ID", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property Med_Product() As Med_Product
		Get
			Return Me._Med_Product.Entity
		End Get
		Set
			Dim previousValue As Med_Product = Me._Med_Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Med_Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Med_Product.Entity = Nothing
					previousValue.ForumSurveyProductAllocations.Remove(Me)
				End If
				Me._Med_Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ForumSurveyProductAllocations.Add(Me)
					Me._ProductRowID = value.ID
				Else
					Me._ProductRowID = CType(Nothing, Nullable(Of System.Guid))
				End If
				Me.SendPropertyChanged("Med_Product")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="DB8874_adminone_admin.Med_Products")>  _
Partial Public Class Med_Product
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As System.Guid
	
	Private _ProductDescription As String
	
	Private _ProductSubDescription As String
	
	Private _PartNumber As String
	
	Private _ProductGroup As String
	
	Private _PriceAUD As System.Nullable(Of Decimal)
	
	Private _PriceNZD As System.Nullable(Of Decimal)
	
	Private _InternalNotes As String
	
	Private _VendorViewableNotes As String
	
	Private _Active As System.Nullable(Of Boolean)
	
	Private _PackageItemOnly As System.Nullable(Of Boolean)
	
	Private _ForumSurveyProductAllocations As EntitySet(Of ForumSurveyProductAllocation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnProductDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnProductDescriptionChanged()
    End Sub
    Partial Private Sub OnProductSubDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnProductSubDescriptionChanged()
    End Sub
    Partial Private Sub OnPartNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPartNumberChanged()
    End Sub
    Partial Private Sub OnProductGroupChanging(value As String)
    End Sub
    Partial Private Sub OnProductGroupChanged()
    End Sub
    Partial Private Sub OnPriceAUDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPriceAUDChanged()
    End Sub
    Partial Private Sub OnPriceNZDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPriceNZDChanged()
    End Sub
    Partial Private Sub OnInternalNotesChanging(value As String)
    End Sub
    Partial Private Sub OnInternalNotesChanged()
    End Sub
    Partial Private Sub OnVendorViewableNotesChanging(value As String)
    End Sub
    Partial Private Sub OnVendorViewableNotesChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnPackageItemOnlyChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPackageItemOnlyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ForumSurveyProductAllocations = New EntitySet(Of ForumSurveyProductAllocation)(AddressOf Me.attach_ForumSurveyProductAllocations, AddressOf Me.detach_ForumSurveyProductAllocations)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As System.Guid
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductDescription", DbType:="NVarChar(256)")>  _
	Public Property ProductDescription() As String
		Get
			Return Me._ProductDescription
		End Get
		Set
			If (String.Equals(Me._ProductDescription, value) = false) Then
				Me.OnProductDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ProductDescription = value
				Me.SendPropertyChanged("ProductDescription")
				Me.OnProductDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductSubDescription", DbType:="NVarChar(256)")>  _
	Public Property ProductSubDescription() As String
		Get
			Return Me._ProductSubDescription
		End Get
		Set
			If (String.Equals(Me._ProductSubDescription, value) = false) Then
				Me.OnProductSubDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ProductSubDescription = value
				Me.SendPropertyChanged("ProductSubDescription")
				Me.OnProductSubDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PartNumber", DbType:="NVarChar(16)")>  _
	Public Property PartNumber() As String
		Get
			Return Me._PartNumber
		End Get
		Set
			If (String.Equals(Me._PartNumber, value) = false) Then
				Me.OnPartNumberChanging(value)
				Me.SendPropertyChanging
				Me._PartNumber = value
				Me.SendPropertyChanged("PartNumber")
				Me.OnPartNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductGroup", DbType:="NVarChar(256)")>  _
	Public Property ProductGroup() As String
		Get
			Return Me._ProductGroup
		End Get
		Set
			If (String.Equals(Me._ProductGroup, value) = false) Then
				Me.OnProductGroupChanging(value)
				Me.SendPropertyChanging
				Me._ProductGroup = value
				Me.SendPropertyChanged("ProductGroup")
				Me.OnProductGroupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriceAUD", DbType:="Money")>  _
	Public Property PriceAUD() As System.Nullable(Of Decimal)
		Get
			Return Me._PriceAUD
		End Get
		Set
			If (Me._PriceAUD.Equals(value) = false) Then
				Me.OnPriceAUDChanging(value)
				Me.SendPropertyChanging
				Me._PriceAUD = value
				Me.SendPropertyChanged("PriceAUD")
				Me.OnPriceAUDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriceNZD", DbType:="Money")>  _
	Public Property PriceNZD() As System.Nullable(Of Decimal)
		Get
			Return Me._PriceNZD
		End Get
		Set
			If (Me._PriceNZD.Equals(value) = false) Then
				Me.OnPriceNZDChanging(value)
				Me.SendPropertyChanging
				Me._PriceNZD = value
				Me.SendPropertyChanged("PriceNZD")
				Me.OnPriceNZDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InternalNotes", DbType:="NVarChar(MAX)")>  _
	Public Property InternalNotes() As String
		Get
			Return Me._InternalNotes
		End Get
		Set
			If (String.Equals(Me._InternalNotes, value) = false) Then
				Me.OnInternalNotesChanging(value)
				Me.SendPropertyChanging
				Me._InternalNotes = value
				Me.SendPropertyChanged("InternalNotes")
				Me.OnInternalNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorViewableNotes", DbType:="NVarChar(MAX)")>  _
	Public Property VendorViewableNotes() As String
		Get
			Return Me._VendorViewableNotes
		End Get
		Set
			If (String.Equals(Me._VendorViewableNotes, value) = false) Then
				Me.OnVendorViewableNotesChanging(value)
				Me.SendPropertyChanging
				Me._VendorViewableNotes = value
				Me.SendPropertyChanged("VendorViewableNotes")
				Me.OnVendorViewableNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit")>  _
	Public Property Active() As System.Nullable(Of Boolean)
		Get
			Return Me._Active
		End Get
		Set
			If (Me._Active.Equals(value) = false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PackageItemOnly", DbType:="Bit")>  _
	Public Property PackageItemOnly() As System.Nullable(Of Boolean)
		Get
			Return Me._PackageItemOnly
		End Get
		Set
			If (Me._PackageItemOnly.Equals(value) = false) Then
				Me.OnPackageItemOnlyChanging(value)
				Me.SendPropertyChanging
				Me._PackageItemOnly = value
				Me.SendPropertyChanged("PackageItemOnly")
				Me.OnPackageItemOnlyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Med_Product_ForumSurveyProductAllocation", Storage:="_ForumSurveyProductAllocations", ThisKey:="ID", OtherKey:="ProductRowID")>  _
	Public Property ForumSurveyProductAllocations() As EntitySet(Of ForumSurveyProductAllocation)
		Get
			Return Me._ForumSurveyProductAllocations
		End Get
		Set
			Me._ForumSurveyProductAllocations.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ForumSurveyProductAllocations(ByVal entity As ForumSurveyProductAllocation)
		Me.SendPropertyChanging
		entity.Med_Product = Me
	End Sub
	
	Private Sub detach_ForumSurveyProductAllocations(ByVal entity As ForumSurveyProductAllocation)
		Me.SendPropertyChanging
		entity.Med_Product = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="DB8874_adminone_admin.Med_QuotationDetails")>  _
Partial Public Class Med_QuotationDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As System.Guid
	
	Private _QuotationID As String
	
	Private _CreatedDateTime As System.Nullable(Of Date)
	
	Private _CreatedBy As String
	
	Private _UpdatedDateTime As System.Nullable(Of Date)
	
	Private _UpdatedBy As String
	
	Private _VendorName As String
	
	Private _VendorAddress As String
	
	Private _VendorAddressCont As String
	
	Private _VendorPostCode As String
	
	Private _VendorState As String
	
	Private _VendorCountry As String
	
	Private _VendorContactName As String
	
	Private _VendorContactNumber As String
	
	Private _VendorContactEmail As String
	
	Private _ZeissSalesPerson As String
	
	Private _Currency As String
	
	Private _InternalNotes As String
	
	Private _ExternalNotes As String
	
	Private _Med_QuotationProducts As EntitySet(Of Med_QuotationProduct)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnQuotationIDChanging(value As String)
    End Sub
    Partial Private Sub OnQuotationIDChanged()
    End Sub
    Partial Private Sub OnCreatedDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedDateTimeChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnUpdatedDateTimeChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnVendorNameChanging(value As String)
    End Sub
    Partial Private Sub OnVendorNameChanged()
    End Sub
    Partial Private Sub OnVendorAddressChanging(value As String)
    End Sub
    Partial Private Sub OnVendorAddressChanged()
    End Sub
    Partial Private Sub OnVendorAddressContChanging(value As String)
    End Sub
    Partial Private Sub OnVendorAddressContChanged()
    End Sub
    Partial Private Sub OnVendorPostCodeChanging(value As String)
    End Sub
    Partial Private Sub OnVendorPostCodeChanged()
    End Sub
    Partial Private Sub OnVendorStateChanging(value As String)
    End Sub
    Partial Private Sub OnVendorStateChanged()
    End Sub
    Partial Private Sub OnVendorCountryChanging(value As String)
    End Sub
    Partial Private Sub OnVendorCountryChanged()
    End Sub
    Partial Private Sub OnVendorContactNameChanging(value As String)
    End Sub
    Partial Private Sub OnVendorContactNameChanged()
    End Sub
    Partial Private Sub OnVendorContactNumberChanging(value As String)
    End Sub
    Partial Private Sub OnVendorContactNumberChanged()
    End Sub
    Partial Private Sub OnVendorContactEmailChanging(value As String)
    End Sub
    Partial Private Sub OnVendorContactEmailChanged()
    End Sub
    Partial Private Sub OnZeissSalesPersonChanging(value As String)
    End Sub
    Partial Private Sub OnZeissSalesPersonChanged()
    End Sub
    Partial Private Sub OnCurrencyChanging(value As String)
    End Sub
    Partial Private Sub OnCurrencyChanged()
    End Sub
    Partial Private Sub OnInternalNotesChanging(value As String)
    End Sub
    Partial Private Sub OnInternalNotesChanged()
    End Sub
    Partial Private Sub OnExternalNotesChanging(value As String)
    End Sub
    Partial Private Sub OnExternalNotesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Med_QuotationProducts = New EntitySet(Of Med_QuotationProduct)(AddressOf Me.attach_Med_QuotationProducts, AddressOf Me.detach_Med_QuotationProducts)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As System.Guid
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuotationID", DbType:="NVarChar(256)")>  _
	Public Property QuotationID() As String
		Get
			Return Me._QuotationID
		End Get
		Set
			If (String.Equals(Me._QuotationID, value) = false) Then
				Me.OnQuotationIDChanging(value)
				Me.SendPropertyChanging
				Me._QuotationID = value
				Me.SendPropertyChanged("QuotationID")
				Me.OnQuotationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDateTime", DbType:="DateTime")>  _
	Public Property CreatedDateTime() As System.Nullable(Of Date)
		Get
			Return Me._CreatedDateTime
		End Get
		Set
			If (Me._CreatedDateTime.Equals(value) = false) Then
				Me.OnCreatedDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._CreatedDateTime = value
				Me.SendPropertyChanged("CreatedDateTime")
				Me.OnCreatedDateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="NVarChar(256)")>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedDateTime", DbType:="DateTime")>  _
	Public Property UpdatedDateTime() As System.Nullable(Of Date)
		Get
			Return Me._UpdatedDateTime
		End Get
		Set
			If (Me._UpdatedDateTime.Equals(value) = false) Then
				Me.OnUpdatedDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedDateTime = value
				Me.SendPropertyChanged("UpdatedDateTime")
				Me.OnUpdatedDateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="NVarChar(256)")>  _
	Public Property UpdatedBy() As String
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (String.Equals(Me._UpdatedBy, value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorName", DbType:="NVarChar(256)")>  _
	Public Property VendorName() As String
		Get
			Return Me._VendorName
		End Get
		Set
			If (String.Equals(Me._VendorName, value) = false) Then
				Me.OnVendorNameChanging(value)
				Me.SendPropertyChanging
				Me._VendorName = value
				Me.SendPropertyChanged("VendorName")
				Me.OnVendorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorAddress", DbType:="NVarChar(256)")>  _
	Public Property VendorAddress() As String
		Get
			Return Me._VendorAddress
		End Get
		Set
			If (String.Equals(Me._VendorAddress, value) = false) Then
				Me.OnVendorAddressChanging(value)
				Me.SendPropertyChanging
				Me._VendorAddress = value
				Me.SendPropertyChanged("VendorAddress")
				Me.OnVendorAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorAddressCont", DbType:="NVarChar(256)")>  _
	Public Property VendorAddressCont() As String
		Get
			Return Me._VendorAddressCont
		End Get
		Set
			If (String.Equals(Me._VendorAddressCont, value) = false) Then
				Me.OnVendorAddressContChanging(value)
				Me.SendPropertyChanging
				Me._VendorAddressCont = value
				Me.SendPropertyChanged("VendorAddressCont")
				Me.OnVendorAddressContChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorPostCode", DbType:="NVarChar(16)")>  _
	Public Property VendorPostCode() As String
		Get
			Return Me._VendorPostCode
		End Get
		Set
			If (String.Equals(Me._VendorPostCode, value) = false) Then
				Me.OnVendorPostCodeChanging(value)
				Me.SendPropertyChanging
				Me._VendorPostCode = value
				Me.SendPropertyChanged("VendorPostCode")
				Me.OnVendorPostCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorState", DbType:="NVarChar(16)")>  _
	Public Property VendorState() As String
		Get
			Return Me._VendorState
		End Get
		Set
			If (String.Equals(Me._VendorState, value) = false) Then
				Me.OnVendorStateChanging(value)
				Me.SendPropertyChanging
				Me._VendorState = value
				Me.SendPropertyChanged("VendorState")
				Me.OnVendorStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorCountry", DbType:="NVarChar(60)")>  _
	Public Property VendorCountry() As String
		Get
			Return Me._VendorCountry
		End Get
		Set
			If (String.Equals(Me._VendorCountry, value) = false) Then
				Me.OnVendorCountryChanging(value)
				Me.SendPropertyChanging
				Me._VendorCountry = value
				Me.SendPropertyChanged("VendorCountry")
				Me.OnVendorCountryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorContactName", DbType:="NVarChar(256)")>  _
	Public Property VendorContactName() As String
		Get
			Return Me._VendorContactName
		End Get
		Set
			If (String.Equals(Me._VendorContactName, value) = false) Then
				Me.OnVendorContactNameChanging(value)
				Me.SendPropertyChanging
				Me._VendorContactName = value
				Me.SendPropertyChanged("VendorContactName")
				Me.OnVendorContactNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorContactNumber", DbType:="NVarChar(60)")>  _
	Public Property VendorContactNumber() As String
		Get
			Return Me._VendorContactNumber
		End Get
		Set
			If (String.Equals(Me._VendorContactNumber, value) = false) Then
				Me.OnVendorContactNumberChanging(value)
				Me.SendPropertyChanging
				Me._VendorContactNumber = value
				Me.SendPropertyChanged("VendorContactNumber")
				Me.OnVendorContactNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendorContactEmail", DbType:="NVarChar(256)")>  _
	Public Property VendorContactEmail() As String
		Get
			Return Me._VendorContactEmail
		End Get
		Set
			If (String.Equals(Me._VendorContactEmail, value) = false) Then
				Me.OnVendorContactEmailChanging(value)
				Me.SendPropertyChanging
				Me._VendorContactEmail = value
				Me.SendPropertyChanged("VendorContactEmail")
				Me.OnVendorContactEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZeissSalesPerson", DbType:="NVarChar(256)")>  _
	Public Property ZeissSalesPerson() As String
		Get
			Return Me._ZeissSalesPerson
		End Get
		Set
			If (String.Equals(Me._ZeissSalesPerson, value) = false) Then
				Me.OnZeissSalesPersonChanging(value)
				Me.SendPropertyChanging
				Me._ZeissSalesPerson = value
				Me.SendPropertyChanged("ZeissSalesPerson")
				Me.OnZeissSalesPersonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Currency", DbType:="NVarChar(256)")>  _
	Public Property Currency() As String
		Get
			Return Me._Currency
		End Get
		Set
			If (String.Equals(Me._Currency, value) = false) Then
				Me.OnCurrencyChanging(value)
				Me.SendPropertyChanging
				Me._Currency = value
				Me.SendPropertyChanged("Currency")
				Me.OnCurrencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InternalNotes", DbType:="NVarChar(MAX)")>  _
	Public Property InternalNotes() As String
		Get
			Return Me._InternalNotes
		End Get
		Set
			If (String.Equals(Me._InternalNotes, value) = false) Then
				Me.OnInternalNotesChanging(value)
				Me.SendPropertyChanging
				Me._InternalNotes = value
				Me.SendPropertyChanged("InternalNotes")
				Me.OnInternalNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExternalNotes", DbType:="NVarChar(MAX)")>  _
	Public Property ExternalNotes() As String
		Get
			Return Me._ExternalNotes
		End Get
		Set
			If (String.Equals(Me._ExternalNotes, value) = false) Then
				Me.OnExternalNotesChanging(value)
				Me.SendPropertyChanging
				Me._ExternalNotes = value
				Me.SendPropertyChanged("ExternalNotes")
				Me.OnExternalNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Med_QuotationDetail_Med_QuotationProduct", Storage:="_Med_QuotationProducts", ThisKey:="ID", OtherKey:="QuotationDetailsRowID")>  _
	Public Property Med_QuotationProducts() As EntitySet(Of Med_QuotationProduct)
		Get
			Return Me._Med_QuotationProducts
		End Get
		Set
			Me._Med_QuotationProducts.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Med_QuotationProducts(ByVal entity As Med_QuotationProduct)
		Me.SendPropertyChanging
		entity.Med_QuotationDetail = Me
	End Sub
	
	Private Sub detach_Med_QuotationProducts(ByVal entity As Med_QuotationProduct)
		Me.SendPropertyChanging
		entity.Med_QuotationDetail = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="DB8874_adminone_admin.Med_QuotationProducts")>  _
Partial Public Class Med_QuotationProduct
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As System.Guid
	
	Private _QuotationDetailsRowID As System.Nullable(Of System.Guid)
	
	Private _QuotationID As String
	
	Private _ProductDescription As String
	
	Private _ProductSubDescription As String
	
	Private _PartNumber As String
	
	Private _ProductGroup As String
	
	Private _PriceAUD As System.Nullable(Of Decimal)
	
	Private _PriceNZD As System.Nullable(Of Decimal)
	
	Private _Med_QuotationDetail As EntityRef(Of Med_QuotationDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnQuotationDetailsRowIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnQuotationDetailsRowIDChanged()
    End Sub
    Partial Private Sub OnQuotationIDChanging(value As String)
    End Sub
    Partial Private Sub OnQuotationIDChanged()
    End Sub
    Partial Private Sub OnProductDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnProductDescriptionChanged()
    End Sub
    Partial Private Sub OnProductSubDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnProductSubDescriptionChanged()
    End Sub
    Partial Private Sub OnPartNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPartNumberChanged()
    End Sub
    Partial Private Sub OnProductGroupChanging(value As String)
    End Sub
    Partial Private Sub OnProductGroupChanged()
    End Sub
    Partial Private Sub OnPriceAUDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPriceAUDChanged()
    End Sub
    Partial Private Sub OnPriceNZDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPriceNZDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Med_QuotationDetail = CType(Nothing, EntityRef(Of Med_QuotationDetail))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As System.Guid
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuotationDetailsRowID", DbType:="UniqueIdentifier")>  _
	Public Property QuotationDetailsRowID() As System.Nullable(Of System.Guid)
		Get
			Return Me._QuotationDetailsRowID
		End Get
		Set
			If (Me._QuotationDetailsRowID.Equals(value) = false) Then
				If Me._Med_QuotationDetail.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnQuotationDetailsRowIDChanging(value)
				Me.SendPropertyChanging
				Me._QuotationDetailsRowID = value
				Me.SendPropertyChanged("QuotationDetailsRowID")
				Me.OnQuotationDetailsRowIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuotationID", DbType:="NVarChar(256)")>  _
	Public Property QuotationID() As String
		Get
			Return Me._QuotationID
		End Get
		Set
			If (String.Equals(Me._QuotationID, value) = false) Then
				Me.OnQuotationIDChanging(value)
				Me.SendPropertyChanging
				Me._QuotationID = value
				Me.SendPropertyChanged("QuotationID")
				Me.OnQuotationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductDescription", DbType:="NVarChar(256)")>  _
	Public Property ProductDescription() As String
		Get
			Return Me._ProductDescription
		End Get
		Set
			If (String.Equals(Me._ProductDescription, value) = false) Then
				Me.OnProductDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ProductDescription = value
				Me.SendPropertyChanged("ProductDescription")
				Me.OnProductDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductSubDescription", DbType:="NVarChar(256)")>  _
	Public Property ProductSubDescription() As String
		Get
			Return Me._ProductSubDescription
		End Get
		Set
			If (String.Equals(Me._ProductSubDescription, value) = false) Then
				Me.OnProductSubDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ProductSubDescription = value
				Me.SendPropertyChanged("ProductSubDescription")
				Me.OnProductSubDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PartNumber", DbType:="NVarChar(16)")>  _
	Public Property PartNumber() As String
		Get
			Return Me._PartNumber
		End Get
		Set
			If (String.Equals(Me._PartNumber, value) = false) Then
				Me.OnPartNumberChanging(value)
				Me.SendPropertyChanging
				Me._PartNumber = value
				Me.SendPropertyChanged("PartNumber")
				Me.OnPartNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductGroup", DbType:="NVarChar(256)")>  _
	Public Property ProductGroup() As String
		Get
			Return Me._ProductGroup
		End Get
		Set
			If (String.Equals(Me._ProductGroup, value) = false) Then
				Me.OnProductGroupChanging(value)
				Me.SendPropertyChanging
				Me._ProductGroup = value
				Me.SendPropertyChanged("ProductGroup")
				Me.OnProductGroupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriceAUD", DbType:="Money")>  _
	Public Property PriceAUD() As System.Nullable(Of Decimal)
		Get
			Return Me._PriceAUD
		End Get
		Set
			If (Me._PriceAUD.Equals(value) = false) Then
				Me.OnPriceAUDChanging(value)
				Me.SendPropertyChanging
				Me._PriceAUD = value
				Me.SendPropertyChanged("PriceAUD")
				Me.OnPriceAUDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriceNZD", DbType:="Money")>  _
	Public Property PriceNZD() As System.Nullable(Of Decimal)
		Get
			Return Me._PriceNZD
		End Get
		Set
			If (Me._PriceNZD.Equals(value) = false) Then
				Me.OnPriceNZDChanging(value)
				Me.SendPropertyChanging
				Me._PriceNZD = value
				Me.SendPropertyChanged("PriceNZD")
				Me.OnPriceNZDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Med_QuotationDetail_Med_QuotationProduct", Storage:="_Med_QuotationDetail", ThisKey:="QuotationDetailsRowID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Med_QuotationDetail() As Med_QuotationDetail
		Get
			Return Me._Med_QuotationDetail.Entity
		End Get
		Set
			Dim previousValue As Med_QuotationDetail = Me._Med_QuotationDetail.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Med_QuotationDetail.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Med_QuotationDetail.Entity = Nothing
					previousValue.Med_QuotationProducts.Remove(Me)
				End If
				Me._Med_QuotationDetail.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Med_QuotationProducts.Add(Me)
					Me._QuotationDetailsRowID = value.ID
				Else
					Me._QuotationDetailsRowID = CType(Nothing, Nullable(Of System.Guid))
				End If
				Me.SendPropertyChanged("Med_QuotationDetail")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
